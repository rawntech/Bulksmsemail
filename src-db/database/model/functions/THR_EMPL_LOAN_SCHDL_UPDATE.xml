<?xml version="1.0"?>
  <database name="FUNCTION THR_EMPL_LOAN_SCHDL_UPDATE">
    <function name="THR_EMPL_LOAN_SCHDL_UPDATE" type="NULL">
      <parameter name="pinstance_id" type="VARCHAR" mode="in">
        <default/>
      </parameter>
      <body><![CDATA[-- Logistice
	v_ResultStr VARCHAR2(2000):='';
	v_Message VARCHAR2(2000):='';
	v_Record_ID VARCHAR2(32);	
       

        -- Parameter-- Parameter
	TYPE RECORD IS REF CURSOR;
	Cur_Parameter RECORD;
	v_NextSP VARCHAR(32);

	v_startdate DATE;

	v_date DATE;
	

	v_AD_Client_ID VARCHAR(32);
        v_AD_Org_ID VARCHAR(32);
        v_thr_emp_loan_id VARCHAR(32);
        
        
        v_tenuremonths NUMBER:=0;
        v_loanamt NUMBER:=0;
        v_temp NUMBER:=0;
        v_dueamt NUMBER:=0;
        v_cnt NUMBER:=0;
        
        
	
  
    BEGIN   
    
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Processing ' || PInstance_ID) ;
    v_ResultStr:='PInstanceNotFound';
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'Y', NULL, NULL) ;
  BEGIN --BODY
    -- Get Parameters
    v_ResultStr:='ReadingParameters';
    FOR Cur_Parameter IN
      (SELECT i.Record_ID,
        p.ParameterName,
        p.P_String,
        p.P_Number,
        p.P_Date
      FROM AD_PInstance i
      LEFT JOIN AD_PInstance_Para p
        ON i.AD_PInstance_ID=p.AD_PInstance_ID
      WHERE i.AD_PInstance_ID=PInstance_ID
      ORDER BY p.SeqNo
      )
    LOOP
      v_Record_ID:=Cur_Parameter.Record_ID;
    END LOOP; -- Get Parameter
    DBMS_OUTPUT.PUT_LINE('  Record_ID=' || v_Record_ID) ;


    SELECT ad_client_id, ad_org_id, tenuremonths, loanamt, starting_date, thr_empl_loanadvance_id 
		INTO v_AD_Client_ID, v_AD_Org_ID, v_tenuremonths, v_loanamt , v_startdate, v_thr_emp_loan_id
		FROM  thr_empl_loan_schdl 
		WHERE thr_empl_loan_schdl_id = v_Record_ID;

    -- Record_ID is the Tab_ID to copy to
    v_ResultStr:='Copying'; 

    v_temp := v_tenuremonths;

    v_dueamt := v_loanamt/v_tenuremonths;

    v_date := v_startdate;

   LOOP

   IF ( v_temp > 0 ) THEN

	v_cnt := v_cnt + 1;

	

    -- Get next no
	AD_Sequence_Next('thr_empl_loan_dtls', v_AD_Client_ID, v_NextSP) ;
    -- Insert
	INSERT INTO thr_empl_loan_dtls
	(
		thr_empl_loan_dtls_id, AD_CLIENT_ID, AD_ORG_ID, ISACTIVE,
		CREATED, CREATEDBY, UPDATED, UPDATEDBY,
		thr_empl_loan_schdl_id, due_date, outstanding_amount, due_amount	        
	)
	VALUES
	(
		v_NextSP, v_AD_Client_ID, v_AD_Org_ID, 
		'Y', now(), '0', now(), '0',
		v_Record_ID, v_date, (v_loanamt*v_temp/v_tenuremonths), v_dueamt		
	)
	; 

	v_temp := v_temp - 1 ;

	--v_date := v_date + '1 month';
	--Oracle compataible with Openbravo function 
	v_date := add_months(v_date , 1);

     ELSE

	EXIT;
	
     END IF;


     END LOOP;

     UPDATE thr_empl_loan_schdl SET ending_date = v_date WHERE thr_empl_loan_schdl_id = v_Record_ID;

     UPDATE thr_empl_loanadvance SET scheduled = 'Y' WHERE thr_empl_loanadvance_id = v_thr_emp_loan_id;

    v_Message := ' Loan Schedule Processed';
    
    --<<FINISH_PROCESS>>
    --  Update AD_PInstance
    DBMS_OUTPUT.PUT_LINE('Updating PInstance - Finished ' || v_Message) ;
    AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 1, v_Message) ;
    RETURN;
  END; --BODY
EXCEPTION
WHEN OTHERS THEN
  v_ResultStr:= '@ERROR=' || SQLERRM;
  DBMS_OUTPUT.PUT_LINE(v_ResultStr) ;
  AD_UPDATE_PINSTANCE(PInstance_ID, NULL, 'N', 0, v_ResultStr) ;
  RETURN;
END THR_EMPL_LOAN_SCHDL_UPDATE
]]></body>
    </function>
  </database>
